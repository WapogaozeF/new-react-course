/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as EventsImport } from './routes/events'
import { Route as IndexImport } from './routes/index'
import { Route as NewsletterIndexImport } from './routes/newsletter/index'
import { Route as EventsIndexImport } from './routes/events/index'
import { Route as EventsNewImport } from './routes/events/new'
import { Route as EventsEventIdImport } from './routes/events/$eventId'
import { Route as EventsEventIdIndexImport } from './routes/events/$eventId/index'
import { Route as EventsEventIdEditImport } from './routes/events/$eventId/edit'

// Create/Update Routes

const EventsRoute = EventsImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const NewsletterIndexRoute = NewsletterIndexImport.update({
  id: '/newsletter/',
  path: '/newsletter/',
  getParentRoute: () => rootRoute,
} as any)

const EventsIndexRoute = EventsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => EventsRoute,
} as any)

const EventsNewRoute = EventsNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => EventsRoute,
} as any)

const EventsEventIdRoute = EventsEventIdImport.update({
  id: '/$eventId',
  path: '/$eventId',
  getParentRoute: () => EventsRoute,
} as any)

const EventsEventIdIndexRoute = EventsEventIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => EventsEventIdRoute,
} as any)

const EventsEventIdEditRoute = EventsEventIdEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => EventsEventIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/events': {
      id: '/events'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsImport
      parentRoute: typeof rootRoute
    }
    '/events/$eventId': {
      id: '/events/$eventId'
      path: '/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof EventsEventIdImport
      parentRoute: typeof EventsImport
    }
    '/events/new': {
      id: '/events/new'
      path: '/new'
      fullPath: '/events/new'
      preLoaderRoute: typeof EventsNewImport
      parentRoute: typeof EventsImport
    }
    '/events/': {
      id: '/events/'
      path: '/'
      fullPath: '/events/'
      preLoaderRoute: typeof EventsIndexImport
      parentRoute: typeof EventsImport
    }
    '/newsletter/': {
      id: '/newsletter/'
      path: '/newsletter'
      fullPath: '/newsletter'
      preLoaderRoute: typeof NewsletterIndexImport
      parentRoute: typeof rootRoute
    }
    '/events/$eventId/edit': {
      id: '/events/$eventId/edit'
      path: '/edit'
      fullPath: '/events/$eventId/edit'
      preLoaderRoute: typeof EventsEventIdEditImport
      parentRoute: typeof EventsEventIdImport
    }
    '/events/$eventId/': {
      id: '/events/$eventId/'
      path: '/'
      fullPath: '/events/$eventId/'
      preLoaderRoute: typeof EventsEventIdIndexImport
      parentRoute: typeof EventsEventIdImport
    }
  }
}

// Create and export the route tree

interface EventsEventIdRouteChildren {
  EventsEventIdEditRoute: typeof EventsEventIdEditRoute
  EventsEventIdIndexRoute: typeof EventsEventIdIndexRoute
}

const EventsEventIdRouteChildren: EventsEventIdRouteChildren = {
  EventsEventIdEditRoute: EventsEventIdEditRoute,
  EventsEventIdIndexRoute: EventsEventIdIndexRoute,
}

const EventsEventIdRouteWithChildren = EventsEventIdRoute._addFileChildren(
  EventsEventIdRouteChildren,
)

interface EventsRouteChildren {
  EventsEventIdRoute: typeof EventsEventIdRouteWithChildren
  EventsNewRoute: typeof EventsNewRoute
  EventsIndexRoute: typeof EventsIndexRoute
}

const EventsRouteChildren: EventsRouteChildren = {
  EventsEventIdRoute: EventsEventIdRouteWithChildren,
  EventsNewRoute: EventsNewRoute,
  EventsIndexRoute: EventsIndexRoute,
}

const EventsRouteWithChildren =
  EventsRoute._addFileChildren(EventsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/events': typeof EventsRouteWithChildren
  '/events/$eventId': typeof EventsEventIdRouteWithChildren
  '/events/new': typeof EventsNewRoute
  '/events/': typeof EventsIndexRoute
  '/newsletter': typeof NewsletterIndexRoute
  '/events/$eventId/edit': typeof EventsEventIdEditRoute
  '/events/$eventId/': typeof EventsEventIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/events/new': typeof EventsNewRoute
  '/events': typeof EventsIndexRoute
  '/newsletter': typeof NewsletterIndexRoute
  '/events/$eventId/edit': typeof EventsEventIdEditRoute
  '/events/$eventId': typeof EventsEventIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/events': typeof EventsRouteWithChildren
  '/events/$eventId': typeof EventsEventIdRouteWithChildren
  '/events/new': typeof EventsNewRoute
  '/events/': typeof EventsIndexRoute
  '/newsletter/': typeof NewsletterIndexRoute
  '/events/$eventId/edit': typeof EventsEventIdEditRoute
  '/events/$eventId/': typeof EventsEventIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/events'
    | '/events/$eventId'
    | '/events/new'
    | '/events/'
    | '/newsletter'
    | '/events/$eventId/edit'
    | '/events/$eventId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/events/new'
    | '/events'
    | '/newsletter'
    | '/events/$eventId/edit'
    | '/events/$eventId'
  id:
    | '__root__'
    | '/'
    | '/events'
    | '/events/$eventId'
    | '/events/new'
    | '/events/'
    | '/newsletter/'
    | '/events/$eventId/edit'
    | '/events/$eventId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EventsRoute: typeof EventsRouteWithChildren
  NewsletterIndexRoute: typeof NewsletterIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EventsRoute: EventsRouteWithChildren,
  NewsletterIndexRoute: NewsletterIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/events",
        "/newsletter/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/events": {
      "filePath": "events.tsx",
      "children": [
        "/events/$eventId",
        "/events/new",
        "/events/"
      ]
    },
    "/events/$eventId": {
      "filePath": "events/$eventId.tsx",
      "parent": "/events",
      "children": [
        "/events/$eventId/edit",
        "/events/$eventId/"
      ]
    },
    "/events/new": {
      "filePath": "events/new.tsx",
      "parent": "/events"
    },
    "/events/": {
      "filePath": "events/index.tsx",
      "parent": "/events"
    },
    "/newsletter/": {
      "filePath": "newsletter/index.tsx"
    },
    "/events/$eventId/edit": {
      "filePath": "events/$eventId/edit.tsx",
      "parent": "/events/$eventId"
    },
    "/events/$eventId/": {
      "filePath": "events/$eventId/index.tsx",
      "parent": "/events/$eventId"
    }
  }
}
ROUTE_MANIFEST_END */
